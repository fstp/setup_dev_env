# vi: ft=yaml.ansible
---
- name: "Set up development environment"
  hosts: "*"
  vars:
    home: "{{ ansible_env.HOME }}"
    bin_dir: "{{ home }}/bin"
  pre_tasks:
    - name: "Update apt cache if needed"
      become: true
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
  tasks:
    - name: "Create user bin directory"
      ansible.builtin.file:
        path: "{{ bin_dir }}"
        state: directory
        mode: '0755'

    - name: "Softlink the Ansible bashrc file into home"
      ansible.builtin.file:
        src: "{{ playbook_dir }}/.bashrc.ansible"
        dest: "{{ home }}/.bashrc.ansible"
        state: link
        access_time: preserve
        modification_time: preserve

    # - name: "Upload Ansible bashrc file"
    #   ansible.builtin.copy:
    #     src: "{{ playbook_dir }}/.bashrc.ansible"
    #     dest: "{{ home }}/.bashrc.ansible"

    - name: "Add Ansible to the regular bashrc file"
      ansible.builtin.lineinfile:
        path: "{{ home }}/.bashrc"
        insertbefore: "BOF"
        line: source ~/.bashrc.ansible

    - name: Install ASDF dependencies
      become: true
      ansible.builtin.apt:
        pkg:
          - unzip
          - build-essential
          - autoconf
          - m4
          - libncurses5-dev
          - libgl1-mesa-dev
          - libglu1-mesa-dev
          - libpng-dev
          - libssh-dev
          - unixodbc-dev
          - net-tools
          - git
          - curl
          - libwxgtk3.2-dev

    - name: "Download ASDF release"
      ansible.builtin.get_url:
       url: https://github.com/asdf-vm/asdf/releases/download/v0.16.7/asdf-v0.16.7-linux-amd64.tar.gz
       dest: "{{ home }}/asdf.tar.gz"
       mode: '0644'

    - name: "Extract ASDF release"
      ansible.builtin.unarchive:
       src: "{{ home }}/asdf.tar.gz"
       dest: "{{ bin_dir }}"
       remote_src: yes

    - name: "Regenerate ASDF shims"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf reshim
      args:
        executable: /usr/bin/bash

    # - name: "Clone ASDF repo"
    #   ansible.builtin.git:
    #     repo: https://github.com/asdf-vm/asdf.git
    #     dest: "{{ home }}/.asdf"
    #     version: master
    #     update: false

    - name: "Install Python package manager (uv)"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add uv
        asdf install uv latest
        asdf set --home uv latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/uv"

    - name: "Install latest Erlang using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add erlang
        asdf install erlang latest
        asdf set --home erlang latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/erl"

    - name: "Clone rebar3"
      ansible.builtin.git:
        repo: https://github.com/erlang/rebar3
        dest: "{{ home }}/rebar3"
        version: main
        update: false

    - name: "Build rebar3"
      ansible.builtin.shell: . ~/.bashrc && cd {{ home }}/rebar3 && ./bootstrap
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/rebar3/_build/prod/bin/rebar3"

    - name: "Install rebar3"
      become: true
      ansible.builtin.shell: . ~/.bashrc && cp -f {{ home }}/rebar3/rebar3 /usr/local/bin
      args:
        executable: /usr/bin/bash
        creates: /usr/local/bin/rebar3

    - name: "Install latest Elixir using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add elixir
        asdf install elixir latest
        asdf set --home elixir latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/iex"

    - name: "Install latest Rust using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add rust
        asdf install rust latest
        asdf set --home rust latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/rustc"

    - name: "[Rust] Install Television for easy searching"
      ansible.builtin.shell: |
        . ~/.bashrc
        cargo install --locked television
        mkdir -p ~/.config/television
        asdf reshim rust
      args:
        executable: /usr/bin/bash

    - name: "[Rust] Install custom Television channels"
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/custom-channels.toml"
        dest: "{{ home }}/.config/television/custom-channels.toml"

    - name: "[Rust] Install Zoxide for easy searching"
      ansible.builtin.shell: |
        . ~/.bashrc
        cargo install --locked zoxide
        asdf reshim rust
      args:
        executable: /usr/bin/bash

    - name: "[Rust] Install htmlq, parse HTML like jq for JSON"
      ansible.builtin.shell: |
        . ~/.bashrc
        cargo install --locked htmlq
        asdf reshim rust
      args:
        executable: /usr/bin/bash

    - name: "Install latest NodeJS using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add nodejs
        asdf install nodejs latest
        asdf set --home nodejs latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/node"

    - name: "Install latest Go using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add golang
        asdf install golang latest
        asdf set --home golang latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/go"

    - name: "Install Just for command files (https://github.com/casey/just)"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add just
        asdf install just latest
        asdf set --home just latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/just"

    - name: "Install Neovim dependencies"
      become: true
      ansible.builtin.apt:
        pkg:
          - luarocks
          - ninja-build
          - cmake
          - gettext
          - unzip
          - curl
          - build-essential
          # Neovim python plugins
          - fd-find # venv-select
          - black
          #- python3-debugpy
          - flake8
          - isort
          - mypy
          - pylint

    - name: "Softlink fdfind to fd"
      become: true
      ansible.builtin.file:
        src: /usr/bin/fdfind
        dest: /usr/bin/fd
        state: link
        access_time: preserve
        modification_time: preserve

    - name: "Clone Neovim"
      ansible.builtin.git:
        repo: https://github.com/neovim/neovim.git
        dest: "{{ home }}/nvim"
        version: master
        update: false

    - name: "Build Neovim"
      community.general.make:
        chdir: "{{ home }}/nvim"
        params:
          CMAKE_BUILD_TYPE: RelWithDebInfo
      changed_when: false

    - name: "Install Neovim"
      become: true
      community.general.make:
        chdir: "{{ home }}/nvim"
        target: install
      changed_when: false

    # - name: "Clone the automation repo"
    #   ansible.builtin.git:
    #     repo: https://github.com/fstp/setup_dev_env.git
    #     dest: "{{ home }}/setup_dev_env"
    #     version: main
    #     update: false

    - name: "Create .config directory"
      ansible.builtin.file:
        path: "{{ home }}/.config"
        state: directory

    - name: "Softlink the Neovim configuration into home"
      ansible.builtin.file:
        src: "{{ playbook_dir }}/nvim"
        dest: "{{ home }}/.config/nvim"
        state: link
        access_time: preserve
        modification_time: preserve

    - name: "Create global pip config directory"
      ansible.builtin.file:
        path: "{{ home }}/.config/pip"
        state: directory

    - name: "Create global pip config file"
      ansible.builtin.file:
        path: "{{ home }}/.config/pip/pip.conf"
        state: touch
        access_time: preserve
        modification_time: preserve

    - name: "Add some pip configuration to allow installing global packages"
      ansible.builtin.blockinfile:
        path: "{{ home }}/.config/pip/pip.conf"
        block: |
          [global]
          break-system-packages = true

    - name: "Install neovim pip package (for communicating with Python)"
      ansible.builtin.pip:
        name: neovim
        state: present

    - name: "Install ripgrep, fzf and tmux"
      become: true
      ansible.builtin.apt:
        pkg:
          - fzf
          - ripgrep
          - tmux

    - name: "Install bat for preview"
      become: true
      ansible.builtin.apt:
        pkg: bat

    - name: "Symlink batcat -> bat"
      become: true
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/bin/bat
        state: link
        access_time: preserve
        modification_time: preserve

    - name: "Softlink tmux configuration into home"
      ansible.builtin.file:
        src: "{{ playbook_dir }}/.tmux.conf"
        dest: "{{ home }}/.tmux.conf"
        state: link
        access_time: preserve
        modification_time: preserve

    - name: "Clone tmux plugin manager"
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ home }}/.tmux/plugins/tpm"
        version: master
        update: false

    - name: "Install shellcheck for bash linting"
      become: true
      ansible.builtin.apt:
        pkg: shellcheck

    - name: "Install latest Lua using ASDF"
      ansible.builtin.shell: |
        . ~/.bashrc
        asdf plugin add lua https://github.com/Stratus3D/asdf-lua.git
        asdf install lua latest
        asdf set --home lua latest
      args:
        executable: /usr/bin/bash
        creates: "{{ home }}/.asdf/shims/lua"
